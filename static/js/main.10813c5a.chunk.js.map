{"version":3,"sources":["logo.svg","app/config.js","app/components/Card/Card.js","app/components/RBoxComponent/RBoxComponent.js","app/components/ChartsComponent/ChartsComponent.js","app/containers/weatherScreen.js","app/App.js","serviceWorker.js","app/reducers/rootReducer.js","index.js"],"names":["module","exports","__webpack_require__","p","apiUrl","CardComponent","showCurrentCharts","item","itemDate","slice","result","_this","props","data","filter","dt_txt","console","log","storeChartData","_this2","this","renderCards","map","i","date","Date","react_default","a","createElement","index_es","Card","className","onClick","CardContent","main","temp","unit","toLocaleDateString","year","month","day","naturalSlideWidth","naturalSlideHeight","totalSlides","visibleSlides","ArrowBack_default","ArrowForward_default","Component","connect","state","dispatch","chartData","type","RBComponent","handleChange","event","storeUnit","target","value","fetchData","fetch","then","response","json","storeData","list","catch","error","nextProps","Radio","checked","onChange","name","inputProps","aria-label","ChartsComponent","length","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","WeatherScreen","RBoxComponent_RBoxComponent","components_Card_Card","components_ChartsComponent_ChartsComponent","App","isLoading","loading","class","weatherScreen","Boolean","window","location","hostname","match","initState","rootReducer","arguments","undefined","action","Object","objectSpread","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wPCCzBC,UADA,sMCWTC,qNACFC,kBAAoB,SAACC,GACjB,IAAMC,EAAWD,EAAKE,MAAM,EAAE,IACxBC,EAASC,EAAKC,MAAMC,KAAKC,OAAO,SAAAP,GAAI,OAAKA,EAAKQ,OAAQN,MAAM,EAAE,MAAQD,IAC5EQ,QAAQC,IAAIP,GACZC,EAAKC,MAAMM,eAAeR,4EAGtB,IAAAS,EAAAC,KACEC,EAAcD,KAAKR,MAAMC,KAAKS,IAAI,SAACf,EAAMgB,GAC3C,GAAGA,EAAI,IAAM,EAAE,CACf,IACIC,EAAQ,IAAIC,KAAKlB,EAAKQ,QACzB,OACIW,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,UAAU,OAAOC,QAAS,kBAAIb,EAAKb,kBAAkBC,EAAKQ,UAC5DW,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAaF,UAAU,eACpBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,SAGAL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,QACRxB,EAAK2B,KAAKC,KADf,IAC0C,aAApBhB,EAAKP,MAAMwB,KAAsB,IAAM,MAGjEV,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,WAAb,SAGAL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,QACRP,EAAKa,mBAAmB,QAnB/B,CAAEC,KAAM,UAAWC,MAAO,OAAQC,IAAK,oBA6BzD,OACId,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIY,kBAAmB,IACnBC,mBAAoB,IACpBC,YAAa,EACbC,cAAe,GAEnBlB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACXL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,UAAU,WAAUL,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,OAChCD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYE,UAAU,WAAUL,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,QAEpCD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACKR,YArDW0B,cAwEbC,cAZQ,SAACC,GACpB,MAAM,CACFb,KAAMa,EAAMb,KACZvB,KAAMoC,EAAMpC,OAGO,SAACqC,GACxB,MAAO,CACHhC,eAAgB,SAACiC,GAAgBD,EAAS,CAACE,KAAK,mBAAoBD,UAAWA,OAIxEH,CAA4C3C,YC3ErDgD,qNAQFC,aAAe,SAACC,GACZ5C,EAAKC,MAAM4C,UAAUD,EAAME,OAAOC,UAItCC,UAAY,WACRC,MAAMxD,EAAO,UAAUO,EAAKC,MAAMwB,MACjCyB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAhD,GACJF,EAAKC,MAAMoD,UAAUnD,EAAKoD,QAE3BC,MAAM,SAAAC,GAAK,OAAInD,QAAQmD,MAAMA,wFAjBfC,GACZA,EAAUhC,OAAShB,KAAKR,MAAMwB,MAC7BhB,KAAKuC,6CAoBT,OADA3C,QAAQC,IAAIG,KAAKR,MAAMC,MAEnBa,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACfL,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACItC,UAAU,QACVuC,QAA6B,WAApBlD,KAAKR,MAAMwB,KACpBmC,SAAUnD,KAAKkC,aACfI,MAAM,SACNc,KAAK,UACLC,WAAY,CAAEC,aAAc,OAEhChD,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAb,YAGAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACfL,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CACItC,UAAU,QACVuC,QAA6B,aAApBlD,KAAKR,MAAMwB,KACpBmC,SAAUnD,KAAKkC,aACfI,MAAM,WACNc,KAAK,aACLC,WAAY,CAAEC,aAAc,OAEhChD,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAb,uBA/CUgB,cAmEXC,cAbQ,SAACC,GACpB,MAAM,CACFpC,KAAMoC,EAAMpC,KACZuB,KAAMa,EAAMb,OAGO,SAACc,GACxB,MAAO,CACHM,UAAW,SAACpB,GAAWc,EAAS,CAACE,KAAK,aAAchB,KAAMA,KAC1D4B,UAAW,SAACnD,GAAWqC,EAAS,CAACE,KAAK,aAAcvC,KAAMA,OAInDmC,CAA4CK,WCnErDsB,2LAIE,OAAGvD,KAAKR,MAAMuC,UAAUyB,OAAS,GAEzBlD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACfL,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CACIC,MAAO,IACPC,OAAQ,IACRlE,KAAMO,KAAKR,MAAMuC,UACjB6B,OAAQ,CAACC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAE9C1D,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAeQ,gBAAgB,QAC/B3D,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAOS,QAAQ,YAAcd,KAAK,oBAClC9C,EAAAC,EAAAC,cAACiD,EAAA,EAAD,MACAnD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,MACAnD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,MACAnD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAKS,QAAQ,YAAYC,KAAK,qBAlBpBxC,cAoCfC,cAPQ,SAACC,GACpB,MAAM,CACFb,KAAMa,EAAMb,KACZe,UAAWF,EAAME,YAIVH,CAAwB2B,GCzBxBa,mLAVP,OACI9D,EAAAC,EAAAC,cAAA,OAAKG,UAAU,0BACXL,EAAAC,EAAAC,cAAC6D,EAAD,MACA/D,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,cANY5C,aCCtB6C,6MAKJjC,UAAY,WACVC,MAAMxD,EAAO,UAAUO,EAAKC,MAAMwB,MACjCyB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAhD,GACJF,EAAKC,MAAMiF,WAAU,GACrBlF,EAAKC,MAAMoD,UAAUnD,EAAKoD,QAE3BC,MAAM,SAAAC,GAAK,OAAInD,QAAQmD,MAAMA,0FAV9B/C,KAAKuC,6CAeL,OADA3C,QAAQC,IAAIG,KAAKR,MAAMwB,MACE,GAAtBhB,KAAKR,MAAMkF,QAEVpE,EAAAC,EAAAC,cAAA,OAAKmE,MAAM,cAAarE,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,aAKrGF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAACoE,EAAD,cAzBMjD,aA6CHC,cAdQ,SAACC,GACtB,MAAM,CACFpC,KAAMoC,EAAMpC,KACZiF,QAAS7C,EAAM6C,UAGM,SAAC5C,GAC1B,MAAO,CACHM,UAAW,SAACpB,GAAWc,EAAS,CAACE,KAAK,aAAchB,KAAMA,KAC1D4B,UAAW,SAACnD,GAAWqC,EAAS,CAACE,KAAK,aAAcvC,KAAMA,KAC1DgF,UAAW,SAACC,GAAc5C,EAAS,CAACE,KAAK,aAAc0C,QAAQA,OAItD9C,CAA4C4C,GCzCvCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EClBAC,EAAY,CACdzF,KAAM,GACNuB,KAAM,WACNe,UAAW,GACX2C,SAAS,GA2CES,EAxCK,WAA+B,IAA9BtD,EAA8BuD,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAtBF,EAAWI,EAAWF,UAAA5B,OAAA,EAAA4B,UAAA,QAAAC,EAC/C,OAAOC,EAAOtD,MACV,IAAK,aACD,OAAOuD,OAAAC,EAAA,EAAAD,CAAA,GACH1D,EADJ,CAECpC,KAAM6F,EAAO7F,OAGlB,IAAK,aACD,OAAO8F,OAAAC,EAAA,EAAAD,CAAA,GACA1D,EADP,CAEIb,KAAMsE,EAAOtE,OAGnB,IAAK,mBACH,OAAOuE,OAAAC,EAAA,EAAAD,CAAA,GACA1D,EADP,CAEIE,UAAWuD,EAAOvD,YAGxB,IAAK,aACH,OAAOwD,OAAAC,EAAA,EAAAD,CAAA,GACA1D,EADP,CAEI6C,QAASY,EAAOZ,UAc5B,OAAO7C,GCnCL4D,EAAQC,YAAYP,EAAaL,OAAOa,8BAAgCb,OAAOa,gCAErFC,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAUL,MAAOA,GAAOnF,EAAAC,EAAAC,cAACuF,EAAD,OAAoBC,SAASC,eAAe,SFsH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,KAAK,SAAA4D,GACjCA,EAAaC","file":"static/js/main.10813c5a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const apiUrl = \"https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&APPID=75f972b80e26f14fe6c920aa6a85ad57&cnt=40\";\nexport default apiUrl","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport { CarouselProvider, Slider, Slide, ButtonBack, ButtonNext } from 'pure-react-carousel';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\nimport ArrowBack from '@material-ui/icons/ArrowBack';\nimport ArrowForward from '@material-ui/icons/ArrowForward'; \nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport './Card.css';\n\n\nclass CardComponent extends Component {\n    showCurrentCharts = (item) => {\n        const itemDate = item.slice(0,10);\n        const result = this.props.data.filter(item => (item.dt_txt).slice(0,10) === itemDate );\n        console.log(result);\n        this.props.storeChartData(result)\n    } \n\n    render(){\n        const renderCards = this.props.data.map((item, i) => {\n            if(i % 8 === 0){\n            var options = { year: 'numeric', month: 'long', day: 'numeric' };\n            var date  = new Date(item.dt_txt);\n             return(\n                 <Slide>\n                 <Card className='card' onClick={()=>this.showCurrentCharts(item.dt_txt)}>\n                     <CardContent className='cardContent'>\n                        <div className=\"tempContainer\">\n                            <p className=\"tempTxt\">\n                                Temp:\n                            </p>\n                            <p className=\"temp\">\n                                {item.main.temp} {this.props.unit !== 'imperial' ? 'C' : 'F'}\n                            </p>\n                        </div>\n                        <div className=\"dateContainer\">\n                            <p className=\"dateTxt\">\n                                Date:\n                            </p>\n                            <p className=\"date\">\n                                {date.toLocaleDateString(\"en-US\", options)}\n                            </p>\n                        </div>\n                        \n                     </CardContent>\n                 </Card>\n                 </Slide>\n             )\n            }\n         })\n        return(\n            <div className='cardContainer'>\n            <CarouselProvider\n                naturalSlideWidth={100}\n                naturalSlideHeight={125}\n                totalSlides={5}\n                visibleSlides={3}\n            >\n            <div className=\"sliderContainer\">\n                <ButtonBack className=\"backBtn\"><ArrowBack/></ButtonBack>\n                <ButtonNext className=\"nextBtn\"><ArrowForward/></ButtonNext>\n            </div>  \n            <Slider>\n                {renderCards}\n            </Slider>  \n        </CarouselProvider>        \n</div>\n        )\n    }\n}\nconst mapStatToProps = (state) => {\n    return{\n        unit: state.unit,\n        data: state.data,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        storeChartData: (chartData) => { dispatch({type:'STORE_CHART_DATA', chartData: chartData}) }\n\n    }\n}\nexport default connect(mapStatToProps, mapDispatchToProps)(CardComponent)","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport Radio from '@material-ui/core/Radio';\nimport apiUrl from '../../config';\n\nimport './RBoxComponent.css';\n\n\nclass RBComponent extends Component {\n\n    componentDidUpdate(nextProps){\n        if(nextProps.unit !== this.props.unit){ \n            this.fetchData();\n        }          \n    }\n\n    handleChange = (event) => {\n        this.props.storeUnit(event.target.value)\n        \n    }\n\n    fetchData = () => {\n        fetch(apiUrl+'&units='+this.props.unit)\n        .then(response => response.json())\n        .then(data => {\n          this.props.storeData(data.list)\n        })\n        .catch(error => console.error(error))\n      }\n\n    render(){\n        console.log(this.props.data)\n        return(\n            <div className='radioContainer'>\n                <div className=\"cgroup\">\n                <Radio\n                    className='crbox'\n                    checked={this.props.unit === 'metric'}\n                    onChange={this.handleChange}\n                    value=\"metric\"\n                    name=\"celsius\"\n                    inputProps={{ 'aria-label': 'C' }}\n                />\n                <p className=\"unitLabel\">Celsius</p>\n                </div>\n\n                <div className=\"fgroup\">\n                <Radio\n                    className='frbox'\n                    checked={this.props.unit === 'imperial'}\n                    onChange={this.handleChange}\n                    value=\"imperial\"\n                    name=\"fahrenheit\"\n                    inputProps={{ 'aria-label': 'F' }}\n                />\n                <p className=\"unitLabel\">Fahrenheit</p>\n                </div>\n            </div>\n        )\n    }\n}\n  \nconst mapStatToProps = (state) => {\n    return{\n        data: state.data,\n        unit: state.unit,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        storeUnit: (unit) => { dispatch({type:'STORE_UNIT', unit: unit}) },\n        storeData: (data) => { dispatch({type:'STORE_DATA', data: data}) }\n\n    }\n}\nexport default connect(mapStatToProps, mapDispatchToProps)(RBComponent)","\n\nimport React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport { BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport './ChartsComponent.css';\n\n\nclass ChartsComponent extends Component {\n    \n    render(){\n        var eeee = 1\n        if(this.props.chartData.length > 0){\n            return(\n                <div className='cardContainer'>\n                <BarChart\n                    width={500}\n                    height={300}\n                    data={this.props.chartData}\n                    margin={{top: 5, right: 30, left: 20, bottom: 5}}\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"main.temp\"   name=\"Unique Visitors\"/>\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey='main.temp' fill=\"#8884d8\" />\n                </BarChart>\n        </div>\n            )\n        }\n        else{\n            return false\n        }\n        \n    }\n}\nconst mapStatToProps = (state) => {\n    return{\n        unit: state.unit,\n        chartData: state.chartData,\n    }\n}\n\nexport default connect(mapStatToProps)(ChartsComponent)\n\n\n","import React,{Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardComponent from '../components/Card/Card';\nimport RBoxComponent from '../components/RBoxComponent/RBoxComponent';\nimport ChartsComponent from '../components/ChartsComponent/ChartsComponent';\n\n\nclass WeatherScreen extends Component{\n    render(){\n        return(\n            <div className=\"weatherScreenContainer\">\n                <RBoxComponent/>\n                <CardComponent/>\n                <ChartsComponent/>\n            </div>\n        )\n    }\n}\n\nexport default WeatherScreen;","import React,{Component} from 'react';\nimport logo from './../logo.svg';\nimport apiUrl from './config';\nimport './App.css';\nimport {connect} from 'react-redux';\n\nimport WeatherScreen from './containers/weatherScreen';\n\nclass App extends Component {\n  componentWillMount(){\n    this.fetchData();\n  }\n\n  fetchData = () => {\n    fetch(apiUrl+'&units='+this.props.unit)\n    .then(response => response.json())\n    .then(data => {\n      this.props.isLoading(false)\n      this.props.storeData(data.list)\n    })\n    .catch(error => console.error(error))\n  }\n\n  render(){\n    console.log(this.props.unit)\n    if(this.props.loading == true){\n      return(\n        <div class=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n      )\n    }\n    else{\n      return (\n        <div className='app'>\n            <WeatherScreen/>\n        </div>\n      );\n    }\n}\n}\nconst mapStatToProps = (state) => {\n  return{\n      data: state.data,\n      loading: state.loading\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      storeUnit: (unit) => { dispatch({type:'STORE_UNIT', unit: unit}) },\n      storeData: (data) => { dispatch({type:'STORE_DATA', data: data}) },\n      isLoading: (loading) => { dispatch({type:'IS_LOADIGN', loading:loading})}\n\n  }\n}\nexport default connect(mapStatToProps, mapDispatchToProps)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\n    data: [],\n    unit: 'imperial',\n    chartData: [],\n    loading: true,\n}\n\nconst rootReducer = (state = initState, action) => {\n    switch(action.type) {\n        case 'STORE_DATA':\n            return {\n             ...state,\n             data: action.data\n            };\n          break;\n        case 'STORE_UNIT':\n            return {\n                ...state,\n                unit: action.unit\n            };\n          break;\n          case 'STORE_CHART_DATA':\n            return {\n                ...state,\n                chartData: action.chartData\n            };\n          break;\n          case 'IS_LOADIGN':\n            return {\n                ...state,\n                loading: action.loading\n            };\n          break;\n          \n        default:\n          // code block\n      }\n    // if(action.type === 'STORE_DATA'){\n    //     return {\n    //         ...state,\n    //         data: action.data\n    //       };\n    // }\n    // if(action)\n    return state\n}\n\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './app/reducers/rootReducer';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}